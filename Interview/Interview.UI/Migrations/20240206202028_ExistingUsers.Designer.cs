// <auto-generated />
using System;
using Interview.UI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Interview.UI.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20240206202028_ExistingUsers")]
    partial class ExistingUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EquityRoleUser", b =>
                {
                    b.Property<Guid>("EquitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EquitiesId", "RoleUsersId");

                    b.HasIndex("RoleUsersId");

                    b.ToTable("EquityRoleUser");
                });

            modelBuilder.Entity("GroupProcess", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProcessesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsId", "ProcessesId");

                    b.HasIndex("ProcessesId");

                    b.ToTable("GroupProcess");
                });

            modelBuilder.Entity("Interview.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Interview.Entities.Equity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewFR")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equities");
                });

            modelBuilder.Entity("Interview.Entities.ExternalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExternalUsers");
                });

            modelBuilder.Entity("Interview.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Interview.Entities.GroupOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HasAccessEE")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupsOwners");
                });

            modelBuilder.Entity("Interview.Entities.InternalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntraUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InternalUsers");
                });

            modelBuilder.Entity("Interview.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("Interview.Entities.InterviewUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleUserType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("InterviewUsers");
                });

            modelBuilder.Entity("Interview.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CandidatesIntroEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidatesIntroFR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadlineCandidate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadlineInterviewer")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailServiceSentFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupNiv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InitUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("InterviewDuration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("MaxTime")
                        .HasColumnType("time");

                    b.Property<string>("MembersIntroEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MembersIntroFR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("MinTime")
                        .HasColumnType("time");

                    b.Property<string>("NoProcessus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Interview.Entities.ProcessGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessGroups");
                });

            modelBuilder.Entity("Interview.Entities.RoleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateExternalEmailSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInserted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAcceptedPrivacyStatement")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleUserType")
                        .HasColumnType("int");

                    b.Property<string>("UserFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserLastname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("Interview.Entities.RoleUserEquity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EquityId");

                    b.HasIndex("RoleUserId");

                    b.ToTable("RoleUserEquities");
                });

            modelBuilder.Entity("Interview.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("Processid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("int");

                    b.Property<int?>("StartValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Processid");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Interview.UI.Services.Mock.Identity.MockUser", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleUserType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MockUsers");
                });

            modelBuilder.Entity("EquityRoleUser", b =>
                {
                    b.HasOne("Interview.Entities.Equity", null)
                        .WithMany()
                        .HasForeignKey("EquitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Entities.RoleUser", null)
                        .WithMany()
                        .HasForeignKey("RoleUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupProcess", b =>
                {
                    b.HasOne("Interview.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Entities.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Entities.EmailTemplate", b =>
                {
                    b.HasOne("Interview.Entities.Process", null)
                        .WithMany("EmailTemplates")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Entities.GroupOwner", b =>
                {
                    b.HasOne("Interview.Entities.Group", "Group")
                        .WithMany("GroupOwners")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Interview.Entities.Interview", b =>
                {
                    b.HasOne("Interview.Entities.Process", null)
                        .WithMany("Interviews")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Entities.InterviewUser", b =>
                {
                    b.HasOne("Interview.Entities.Interview", null)
                        .WithMany("InterviewUsers")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Entities.ProcessGroup", b =>
                {
                    b.HasOne("Interview.Entities.Group", "Group")
                        .WithMany("ProcessGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Entities.Process", "Process")
                        .WithMany("ProcessGroups")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("Interview.Entities.RoleUser", b =>
                {
                    b.HasOne("Interview.Entities.Process", null)
                        .WithMany("RoleUsers")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Entities.RoleUserEquity", b =>
                {
                    b.HasOne("Interview.Entities.Equity", "Equity")
                        .WithMany("EmailTemplateEquities")
                        .HasForeignKey("EquityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview.Entities.RoleUser", "RoleUser")
                        .WithMany("RoleUserEquities")
                        .HasForeignKey("RoleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equity");

                    b.Navigation("RoleUser");
                });

            modelBuilder.Entity("Interview.Entities.Schedule", b =>
                {
                    b.HasOne("Interview.Entities.Process", null)
                        .WithMany("Schedules")
                        .HasForeignKey("Processid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Interview.Entities.Equity", b =>
                {
                    b.Navigation("EmailTemplateEquities");
                });

            modelBuilder.Entity("Interview.Entities.Group", b =>
                {
                    b.Navigation("GroupOwners");

                    b.Navigation("ProcessGroups");
                });

            modelBuilder.Entity("Interview.Entities.Interview", b =>
                {
                    b.Navigation("InterviewUsers");
                });

            modelBuilder.Entity("Interview.Entities.Process", b =>
                {
                    b.Navigation("EmailTemplates");

                    b.Navigation("Interviews");

                    b.Navigation("ProcessGroups");

                    b.Navigation("RoleUsers");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Interview.Entities.RoleUser", b =>
                {
                    b.Navigation("RoleUserEquities");
                });
#pragma warning restore 612, 618
        }
    }
}
