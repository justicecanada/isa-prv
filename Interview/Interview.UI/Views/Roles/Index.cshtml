@model VmIndex
@using Interview.UI.Models
@using Interview.UI.Models.Roles;
@using Interview.UI.Helpers
@using Interview.Entities
@inject IViewLocalizer localizer

@{

    ViewBag.Title = localizer["Title"].Value;

    ViewBag.FieldOrder = new List<string>(new string[]
    {
        "UserType", "InternalName", "ExistingExternalName", "NewExternalFirstName", "NewExternalLastName", "NewExternalEmail", "RoleId", "UserLanguageId"
    }).Select(x => x.ToLower()).ToList();

    string cultureName = System.Globalization.CultureInfo.CurrentCulture.Name;
    Process process = ViewBag.Process;

    List<ExternalUser> externalUsers = ViewBag.ExternalUsers;
    List<SelectListItem> externalUsersItems = new List<SelectListItem>();
    externalUsersItems.Add(new SelectListItem(localizer["PleaseSelect"].Value, ""));
    foreach (var externalUser in externalUsers)
    {
        externalUsersItems.Add(new SelectListItem()
        {         
            Value = externalUser.Email,
            Text = $"{externalUser.SurName}, {externalUser.GivenName}"
        });
    }

    var rolesItems = Html.GetEnumSelectList<VmRoleUserTypes>().ToList();
    rolesItems.Insert(0, new SelectListItem(localizer["PleaseSelect"].Value, ""));

    var userLanguageItems = Html.GetEnumSelectList<VmLanguageTypes>().ToList();
    userLanguageItems.Insert(0, new SelectListItem(localizer["PleaseSelect"].Value, ""));

    bool showEquities = ViewBag.ShowEquities;

    List<RoleUser> roleUsers = ViewBag.RoleUsers;
    bool showLegend = roleUsers.Any(x => (bool)x.IsExternal);

}

@{
    await Html.RenderPartialAsync("NotificationPartial");
}

<h2>@process.NoProcessus</h2>

@{
    await Html.RenderPartialAsync("ValidationSummary");
}

<form>

    @Html.AntiForgeryToken()

    <section class="panel panel-default">

        <header class="panel-heading">
            <h5 class="pandel-title">@localizer["UserPanelHeading"]</h5>
        </header>

        <div class="panel-body">

            <div class="col-md-4 brdr-rght">

                <div class="row">
                    @Html.LabelFor(x => x.UserType, new { @class = "required" })
                </div>
                <div class="row">
                    @Html.ValidationMessageFor(x => x.UserType, "", new { @class = "text-danger" })
                </div>

                <div class="row">
                    @Html.RadioButtonFor(x => x.UserType, (int)UserTypes.Internal, new { @id = "Internal", @class = "form-check-input" })
                    <label for="Internal" class="form-check-label">@localizer["Internal"]</label>
                </div>
                <div id="internalDetails" class="row userTypeDetails mrgn-lft-md" style="display:@(Model.UserType == UserTypes.Internal ? "" : "none")">
                    @Html.EditorFor(x => x.InternalName, "Question", new { inputControl = Html.TextBoxFor(x => x.InternalName, new { @class = "form-control" }) })
                    @Html.HiddenFor(x => x.InternalId)
                </div>

                <div class="row">
                    @Html.RadioButtonFor(x => x.UserType, (int)UserTypes.ExistingExternal, new { @id = "ExistingExternal", @class = "form-check-input" })
                    <label for="ExistingExternal" class="form-check-label">@localizer["ExistingExternal"]</label>
                </div>
                <div id="existingExternalDetails" class="row userTypeDetails mrgn-lft-md" style="display:@(Model.UserType == UserTypes.ExistingExternal ? "" : "none" )">
                    @Html.EditorFor(x => x.ExistingExternalEmail, "Question", new { inputControl = @Html.DropDownList("ExistingExternalEmail", externalUsersItems, new { @class = "form-control" }) })
                </div>

                <div class="row">
                    @Html.RadioButtonFor(x => x.UserType, (int)UserTypes.NewExternal, new { @id = "NewExternal", @class = "form-check-input" })
                    <label for="NewExternal" class="form-check-label">@localizer["NewExternal"]</label>
                </div>
                <div id="newExternalDetails" class="row userTypeDetails mrgn-lft-md" style="display:@(Model.UserType == UserTypes.NewExternal ? "" : "none" )">
                    @Html.EditorFor(x => x.NewExternalFirstName, "Question", new { inputControl = Html.TextBoxFor(x => x.NewExternalFirstName, new { @class = "form-control" }) })
                    @Html.EditorFor(x => x.NewExternalLastName, "Question", new { inputControl = Html.TextBoxFor(x => x.NewExternalLastName, new { @class = "form-control" }) })
                    @Html.EditorFor(x => x.NewExternalEmail, "Question", new { inputControl = Html.TextBoxFor(x => x.NewExternalEmail, new { @class = "form-control" }) })
                </div>

            </div>

            <div class="col-md-4 brdr-rght">

                @Html.EditorFor(x => x.RoleUserType, "Question", new { inputControl = @Html.DropDownList("RoleUserType", rolesItems, new { @class = "form-control" }) })
                @Html.EditorFor(x => x.LanguageType, "Question", new { inputControl = @Html.DropDownList("LanguageType", userLanguageItems, new { @class = "form-control" }) })

            </div>

            <div class="col-md-4">

                @if (showEquities)
                {

                    <div class="row form-group">
                        <div class="col-md-12">
                            <label>@localizer["Equities"]</label>
                        </div>              
                        @{
                            for (int i = 0; i < Model.Equities.Count; i++)
                            {
                                ViewData.TemplateInfo.HtmlFieldPrefix = $"Equities[{i.ToString()}]";
                                VmEquity vmEquity = Model.Equities[i];
                                await Html.RenderPartialAsync("EquityCheckbox", vmEquity);
                            }
                            ViewData.TemplateInfo.HtmlFieldPrefix = "";
                        }
                    </div>
                }

            </div>

        </div>

        <div class="panel-footer">

            <div>
                <input type="submit" value="@localizer["Reset"]" id="btnReset" class="btn btn-default mr-2" formaction=@Url.Action("Index", "Roles")
                        formmethod="get" />
                <input type="submit" value="@localizer["Save"]" id="btnSave" class="btn btn-primary mr-2" formaction=@Url.Action("Index", "Roles")
                        formmethod="post" />
            </div>

            </div>

    </section>

</form>

@{
    if (showLegend)
        await Html.RenderPartialAsync("LegendPartial");
    await Html.RenderPartialAsync("TablePartial");
    await Html.RenderPartialAsync("ModalContainer");
}

<script type="text/javascript">

    var deleteUri = "@Url.ActionLink("DeleteRoleUserModal", "Roles")";

</script>